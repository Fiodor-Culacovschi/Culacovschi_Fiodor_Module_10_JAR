{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red195\green123\blue90;\red23\green23\blue26;\red174\green176\blue183;
\red103\green107\blue114;\red185\green101\blue173;\red71\green149\blue242;\red89\green158\blue96;\red38\green157\blue169;
\red164\green160\blue78;}
{\*\expandedcolortbl;;\csgenericrgb\c76471\c48235\c35294;\csgenericrgb\c9020\c9020\c10196;\csgenericrgb\c68235\c69020\c71765;
\csgenericrgb\c40392\c41961\c44706;\csgenericrgb\c72549\c39608\c67843;\csgenericrgb\c27843\c58431\c94902;\csgenericrgb\c34902\c61961\c37647;\csgenericrgb\c14902\c61569\c66275;
\csgenericrgb\c64314\c62745\c30588;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 package \cf4 chapter33;\
\
\cf2 import \cf4 javax.swing.*;\
\cf2 import \cf4 java.awt.*;\
\cf2 import \cf4 java.awt.event.ActionEvent;\
\cf2 import \cf4 java.awt.event.ActionListener;\
\cf2 import \cf4 java.io.DataInputStream;\
\cf2 import \cf4 java.io.DataOutputStream;\
\cf2 import \cf4 java.io.IOException;\
\cf2 import \cf4 java.net.Socket;\
\
\cf2 public class \cf4 Client \{\
\
    \cf5 // TextArea to display the results from the server\
    \cf2 private static \cf4 JTextArea 
\f1\i \cf6 resultTextArea
\f0\i0 \cf4 ;\
\
    \cf2 public static void \cf7 main\cf4 (String[] args) \{\
        \cf5 // Create the main frame\
        \cf4 JFrame frame = \cf2 new \cf4 JFrame(\cf8 "Client"\cf4 );\
        frame.setDefaultCloseOperation(JFrame.
\f1\i \cf6 EXIT_ON_CLOSE
\f0\i0 \cf4 );\
        frame.setSize(\cf9 400\cf4 , \cf9 300\cf4 );\
\
        \cf5 // Create and configure the result text area\
        
\f1\i \cf6 resultTextArea 
\f0\i0 \cf4 = \cf2 new \cf4 JTextArea();\
        
\f1\i \cf6 resultTextArea
\f0\i0 \cf4 .setEditable(\cf2 false\cf4 );\
        frame.add(\cf2 new \cf4 JScrollPane(
\f1\i \cf6 resultTextArea
\f0\i0 \cf4 ), BorderLayout.
\f1\i \cf6 CENTER
\f0\i0 \cf4 );\
\
        \cf5 // Create input field and send button\
        \cf4 JTextField inputField = \cf2 new \cf4 JTextField();\
        JButton sendButton = \cf2 new \cf4 JButton(\cf8 "Send Number"\cf4 );\
        sendButton.addActionListener(\cf2 new \cf4 ActionListener() \{\
            \cf10 @Override\
            \cf2 public void \cf7 actionPerformed\cf4 (ActionEvent e) \{\
                \cf5 // When the send button is clicked, send the input to the server\
                
\f1\i \cf4 sendNumberToServer
\f0\i0 (\cf6 inputField\cf4 .getText());\
                \cf6 inputField\cf4 .setText(\cf8 ""\cf4 );\
            \}\
        \});\
\
        \cf5 // Panel to hold the input components\
        \cf4 JPanel inputPanel = \cf2 new \cf4 JPanel(\cf2 new \cf4 BorderLayout());\
\
        \cf5 // Label to instruct the user\
        \cf4 JLabel enterNumberLabel = \cf2 new \cf4 JLabel(\cf8 "Enter a number to evaluate: "\cf4 );\
        inputPanel.add(enterNumberLabel, BorderLayout.
\f1\i \cf6 WEST
\f0\i0 \cf4 );\
\
        \cf5 // Add input field and send button to the input panel\
        \cf4 inputPanel.add(inputField, BorderLayout.
\f1\i \cf6 CENTER
\f0\i0 \cf4 );\
        inputPanel.add(sendButton, BorderLayout.
\f1\i \cf6 EAST
\f0\i0 \cf4 );\
\
        \cf5 // Add the input panel to the main frame\
        \cf4 frame.add(inputPanel, BorderLayout.
\f1\i \cf6 SOUTH
\f0\i0 \cf4 );\
\
        \cf5 // Make the frame visible\
        \cf4 frame.setVisible(\cf2 true\cf4 );\
    \}\
\
    \cf5 // Method to send the input number to the server and receive the response\
    \cf2 private static void \cf7 sendNumberToServer\cf4 (String input) \{\
        \cf2 try \cf4 \{\
            \cf5 // Parse the input as an integer\
            \cf2 int \cf4 number = Integer.
\f1\i parseInt
\f0\i0 (input);\
\
            \cf5 // Create a socket to connect to the server\
            \cf4 Socket socket = \cf2 new \cf4 Socket(\cf8 "localhost"\cf4 , \cf9 8000\cf4 );\
            DataInputStream fromServer = \cf2 new \cf4 DataInputStream(socket.getInputStream());\
            DataOutputStream toServer = \cf2 new \cf4 DataOutputStream(socket.getOutputStream());\
\
            \cf5 // Send the number to the server\
            \cf4 toServer.writeInt(number);\
            toServer.flush();\
\
            \cf5 // Receive the response from the server\
            \cf2 boolean \cf4 isPrime = fromServer.readBoolean();\
\
            \cf5 // Display the response in the client window\
            
\f1\i \cf4 displayResponse
\f0\i0 (isPrime);\
\
            \cf5 // Close the socket\
            \cf4 socket.close();\
        \} \cf2 catch \cf4 (NumberFormatException | IOException ex) \{\
            \cf5 // Handle exceptions such as invalid input or IO errors\
            \cf4 ex.printStackTrace();\
        \}\
    \}\
\
    \cf5 // Method to display the server's response in the client window\
    \cf2 private static void \cf7 displayResponse\cf4 (\cf2 boolean \cf4 isPrime) \{\
        \cf5 // Construct a response message based on whether the number is prime or not\
        \cf4 String response = isPrime ? \cf8 "Yes, the number is a prime number." \cf4 : \cf8 "No, the number is NOT a prime number."\cf4 ;\
\
        \cf5 // Append the response to the resultTextArea\
        
\f1\i \cf6 resultTextArea
\f0\i0 \cf4 .append(\cf8 "The response from the server is: " \cf4 + response + \cf8 "\cf2 \\n\cf8 "\cf4 );\
    \}\
\}\
\
}